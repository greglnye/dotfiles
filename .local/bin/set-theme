#!/usr/bin/env python3

import argparse
import re
import textwrap

from pathlib import Path
from subprocess import run, PIPE
from time import sleep


THEMES = {
  "gruvbox": {
    "dark": {
      "terminal": {
        "theme-name": "Gruvbox Dark",
        "cursor-color": "#ffb261",
      },
      "tmux": [
        {"status-style": "fg=colour244"},
        {"window-status-current-style": "fg=colour222"},
        {"pane-border-style": "fg=colour240"},
        {"pane-active-border-style": "fg=colour243"}
      ]
    },
    "light": {
      "terminal": {
        "theme-name": "Gruvbox Light",
        "cursor-color": "#ffb261",
      },
      "tmux": [
        {"status-style": "fg=colour179"},
        {"window-status-current-style": "fg=colour172"},
        {"pane-border-style": "fg=colour186"},
        {"pane-active-border-style": "fg=colour178"}
      ]
    }
  },
  "one": {
    "dark": {
      "terminal": {
        "theme-name": "One Half Dark",
        "cursor-color": "#6de6f5",
      },
      "tmux": [
        {"status-style": "fg=colour110"},
        {"window-status-current-style": "fg=colour39"},
        {"pane-border-style": "fg=colour240"},
        {"pane-active-border-style": "fg=colour243"}
      ]
    },
    "light": {
      "terminal": {
        "theme-name": "One Half Light",
        "cursor-color": "#6de6f5",
      },
      "tmux": [
        {"status-style": "fg=colour110"},
        {"window-status-current-style": "fg=colour39"},
        {"pane-border-style": "fg=colour253"},
        {"pane-active-border-style": "fg=colour250"}
      ]
    }
  }
}


def get_windows_user():
    result = run(['powershell.exe', '$env:UserName'],
                 stdout=PIPE,
                 universal_newlines=True)
    return result.stdout.rstrip()


HOME = str(Path.home())

TERMINAL_CONFIG = f'/c/Users/{get_windows_user()}/AppData/Local/Packages/Microsoft.WindowsTerminalPreview_8wekyb3d8bbwe/LocalState/settings.json'  # noqa: E501
SHELL_CONFIG = f'{HOME}/.bashrc'
TMUX_CONFIG = f'{HOME}/.tmux.conf'
VIM_CONFIG = f'{HOME}/.vimrc'


def replace_in_file(search, replace, file):
    with open(file, 'r') as f:
        content = f.read()

    content = re.sub(search, replace, content, flags=re.MULTILINE)

    with open(file, 'w') as f:
        f.write(content)

    return None


def active_theme_background():
    with open(VIM_CONFIG, 'r') as f:
        content = f.read()

    if bool(re.search('^set background=dark$', content, flags=re.MULTILINE)):
        return 'dark'
    else:
        return 'light'


def toggle_theme_background(theme):
    bg = 'dark'

    if active_theme_background() == bg:
        bg = 'light'

    # Without this, if you change your theme with --toggle-bg rapidly I was
    # running into edge cases around the MS terminal either crashing or
    # corrupting its settings.json file to the point where it would revert the
    # settings.json file back to its default state.
    #
    # I have no idea what's causing it but it was nearly guaranteed to happen
    # within 15 seconds if you changed your theme every half second or so. It
    # only ever happened if you used the --toggle-bg flag too.
    #
    # It probably shouldn't happen when using the script normally but adding
    # this sleep adds an extra level of protection.
    sleep(1)

    replace_in_file(r'^set background=.*$', f'set background={bg}', VIM_CONFIG)
    replace_in_file(r'FZF_DEFAULT_OPTS="--color=.*"$',
                    f'FZF_DEFAULT_OPTS="--color={bg}"', SHELL_CONFIG)

    change_terminal_theme(theme)
    change_tmux_theme(theme)

    return None


def change_terminal_theme(theme):
    terminal = THEMES[theme][active_theme_background()]['terminal']

    replace_in_file(r'"colorScheme": ".*",$',
                    f'"colorScheme": "{terminal["theme-name"]}",',
                    TERMINAL_CONFIG)

    replace_in_file(r'"cursorColor": ".*",$',
                    f'"cursorColor": "{terminal["cursor-color"]}",',
                    TERMINAL_CONFIG)

    return None


def change_tmux_theme(theme):
    tmux_options = THEMES[theme][active_theme_background()]['tmux']

    for option in tmux_options:
        for key, value in option.items():
            replace_in_file(rf'^set -g {key} .*$', f'set -g {key} {value}',
                            TMUX_CONFIG)

    run(['tmux', 'source-file', TMUX_CONFIG])

    return None


def change_vim_theme(theme):
    replace_in_file(r'^colorscheme .*$', f'colorscheme {theme}', VIM_CONFIG)

    return None


def check_theme(str):
    str = str.strip()

    if str in THEMES.keys():
        return str
    else:
        msg = f'not a valid theme: "{str}"'
        raise argparse.ArgumentTypeError(msg)


def parseargs():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
        Set a theme along with optionally toggling dark and light backgrounds.
        '''))

    parser.add_argument('theme', default=None,
                        metavar='THEME', type=check_theme,
                        help='the theme name, such as gruvbox or one')

    parser.add_argument('--toggle-bg', default=False, type=bool, nargs='?',
                        const=True, metavar='BOOL',
                        help='toggle the background between dark and light')

    return parser.parse_args()


if __name__ == '__main__':
    args = parseargs()

    if args.theme:
        change_terminal_theme(args.theme)
        change_tmux_theme(args.theme)
        change_vim_theme(args.theme)

    if args.toggle_bg:
        toggle_theme_background(args.theme)
